$comment(-*- coding: utf-8 -*- vim: set encoding=utf-8:)$
Translated by Li Linghui, bigpanda

h1. 第十一章：上下文相关的扫描器

h2. 概要

理论上，扫描器只负责切分记号，解析器只负责处理得到的序列，二者完全独立……如果所说的阶段真的可以这样，
会是一件令人欣慰的事情。可是，现实不会那样美好，需要根据上下文的相关性改变切分记号的方法以及记号本身。
本章讨论的便是扫描器和解析器的合作。

h3. 具体示例

在普通的程序设计语言中，除了切分单词之外，空白没有什么意义。但Ruby有些不寻常，空格有时会完全改变含义。
比如，像下面这种情况。

<pre class="emlist">
a[i] = 1      # a[i] = (1)
a [i]         # a([i])
</pre>

前者是索引赋值，后者是省略了括号的方法调用，传递的参数是数组元素。

还有下面这种情况。

<pre class="emlist">
a  +  1    # (a) + (1)
a  +1      # a(+1)
</pre>

这里的用法过于随意，不太让人喜欢。

但是仅仅这样省略方法括号，似乎会给读者留下了不好的印象，所以，还有另外一个例子。

<pre class="emlist">
`cvs diff parse.y`          # 命令调用的字符串
obj.`("cvs diff parse.y")   # 一般的方法调用
</pre>

这里，前者采用了字面量的形式进行方法调用，而后者用的是一般形式的方法调用。
根据上下文的不同对应的操作也不同。上下文不同，处理会有很大差异。

下面的例子作用上差异极大。

<pre class="emlist">
print(<<EOS)   # here document
......
EOS

list = []
list << nil    # list.push(nil)
</pre>

前者是here-document，后者是运算符形式的方法调用。

像这样的Ruby的语法，确实存在很多实现不是很合适的地方。即便不详细的列举，一章也介绍不完。
因此，本章的讨论限定在基础原理和难度极高的部分。

h3. `lex_state`

`lex_state`是一个变量。不用说，`lex`就是`lexer`的`lex`，这个变量表示扫描器的状态（state）。

有哪些状态呢？看一下定义。

▼enum lex_state

<pre class="longlist">
 61  static enum lex_state {
  62      EXPR_BEG,      /* ignore newline, +/- is a sign. */
  63      EXPR_END,      /* newline significant, +/- is a operator. */
  64      EXPR_ARG,      /* newline significant, +/- is a operator. */
  65      EXPR_CMDARG,   /* newline significant, +/- is a operator. */
  66      EXPR_ENDARG,   /* newline significant, +/- is a operator. */
  67      EXPR_MID,      /* newline significant, +/- is a operator. */
  68      EXPR_FNAME,    /* ignore newline, no reserved words. */
  69      EXPR_DOT,      /* right after `.' or `::', no reserved words. */
  70      EXPR_CLASS,    /* immediate after `class', no here document. */
  71  } lex_state;

(parse.y)
</pre>

前缀中的`EXPR_`是expression（表达式）的意思。比如，`EXPR_BEG`是"表达式开始"，而`EXPR_DOT`是"表达式中，点之后"。

具体说明一下。`EXPR_BEG`表示“在表达式开始”。`EXPR_END`表示“在表达式结尾”。`EXPR_ARG`表示"在方法的参数前"。
`EXPR_FNAME`表示"（def等）方法名称前"。跳过的部分会在后面详细分析。

顺便说一下，`lex_state`表示的是类似于“括号后”、“语句头”之类的信息，这并不是扫描器的状态，而是解析器的状态。
但通常称为扫描器的状态，这是为什么呢？

这里所说的“状态”和通常所说的“状态”有些差异。`lex_state`中所谓的“状态”指的是“扫描器可以有这样行为的状态”。
比如，准确的说，`EXPR_BEG`表示“如果扫描器现在工作的话，它应该运行到语句开始的状态”。

用专业术语描述，就是把扫描器当作状态机考虑时的状态。然而，这样确实很难解释，而且离题甚远。
至于细节，有兴趣的读者可以适当的参阅读数据结构相关的教科书。

h3. 上下文相关扫描器的阅读与理解

阅读上下文相关的扫描器不大可能一次掌握全部要点。写解析器的人通常不会使用上下文相关的扫描器。这是当然的，因为它并非处理的主线。
因此，扫描器的状态管理便是“其他主线部分的附属品”。总而言之，扫描器状态变迁的整体之美并非最初便存在的。

那要怎么做才好呢？有意识的通读代码应该是很好的。“这个部分处理这里”、“这段代码解决了这个问题”，根据这些目的删除这些代码。
开始便考虑问题相互之间关系，这是绝对行不通的。再说一遍，最初并不是这样。

虽然那么说，有个某种程度上的目标还是必要的。阅读上下文相关的扫描器时的目标是，每一种状态究竟是处于怎样一种状态。
比如`EXPR_BEG`是怎样一种状态，解析器处于表达式开始。就这样。

h4. 静态方法

如何理解怎样做，有三种方法。

* 查看状态名称

不过，这是显而易见的方法。比如，如果是`EXPR_BEG`，当然可以预期在某个开始的地方（Beginning）。

* 观察状态如何变化

根据状态，确定切分Token的方法如何变化。而且要与实际执行相结合。

* 查看从什么状态变迁而来

可以观察什么Token从怎样的状态变迁而来。比如，`'\n'`之后状态一定会变迁到`HEAD`，它表示的肯定是一行的开始。

以`EXPR_BEG`为例考虑一下。在`ruby`中，所有的状态变迁都表示为对`lex_state`赋值，先以`grep`过滤用`EXPR_BEG`进行的赋值。
接着就会输出它们在哪。比如，像`yylex()`的`'#'`和`'!'`等……这样。再来考虑一下变迁之前的状态，就可以知道它适用的情况。

!images/ch_contextual_transittobeg.png(到`EXPR_BEG`的变迁)!

这确实就是语句的开头。明白了吧！特别是在`'\n'`和`';'`之后。因为还有开括号和逗号，这表示它不仅可以用在语句开头，也可以用于表达式开头。

h4. 动态分析方法

还有更加简洁的验证实际行为的方法。比如，在调试器中，给`yylex()`挂上钩子查看`lex_state`。

或是改写源码，输出状态变迁。就`lex_state`而言，它的赋值和比较只是数值的方式，将它转化为文本方式输出会更好。
附赠的CD-ROM中有一个名为rubylex-analyser的工具。这个工具的用法本书也进行了一些说明。

就整体的顺序而言，先使用调试器和工具验证状态的变迁。然后对照源码进行确认，给出尽量详尽的解释。

h3. 关于各种状态

先来简要说明一下`lex_state`的状态。

* EXPR_BEG

表达式的开始。`\n ( { [ ! ? :`，以及紧跟在运算符`op=`之后等等。这是最常见的状态。

* EXPR_MID

紧跟在保留字`return break next rescue`之后。二元运算符`*`和`&`变得无效。行为类似于`EXPR_BEG`。

* EXPR_ARG

紧跟在可能成为方法调用的“方法名”部分的元素之后，或者紧跟在`[`之后。但不包括作为`EXPR_CMDARG`的地方。

* EXPR_CMDARG

通常是出现在方法调用的第一个参数之前。详细内容请参考“do的冲突”一节。

* EXPR_END

可能是语句结尾的地方。比如在字面量或括号后面。但不包括作为`EXPR_ENDARG`的地方。

* EXPR_ENDARG

`EXPR_END`的特殊版本。对应着紧跟在`tLPAREN_ARG`的闭括号之后。参考“括号括起来的第一实参”。

* EXPR_FNAME

方法名之前。具体说来，就是`def alias undef`以及紧跟在Symbol的`“:”`之后。 点号单独变成名字。

* EXPR_DOT

方法调用的点（.）后面。用法与`EXPR_FNAME`类似。所有保留字都会当作标识符处理。 点号单独变成名字。

* EXPR_CLASS

保留字class后面。只有这个状态有很多限制。

总结起来就是：

* BEG MID
* END ENDARG
* ARG CMDARG
* FNAME DOT

上面展示了各种相似的情况。只有`EXPR_CLASS`稍有特殊，它出现的情况很有限，起初可以不必考虑它。
