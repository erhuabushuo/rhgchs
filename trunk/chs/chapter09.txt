$comment(-*- coding: utf-8 -*- vim: set encoding=utf-8:)$
Translated by Ye Zheng, Chaofan Jiang

h1. 第九章：`yacc`快速教程

h2. 概要

h3. 解析器和扫描器

一直以来，如何为程序设计语言编写解析器一直是一个活跃的研究领域，并形成了一些成型的策略。
只要不是特别诡异的语法，我们便可以用下面的方式进行处理。

首先，最下面有一个“将字符串分割成一系列的单词（或是记号（token））”的部分。
这个部分称为扫描器（scanner）或词法解析器（lexer）。
也有人用“词法分析器（lexical analyzer）”，但说起来太复杂，所以，我们选择了扫描器（scanner）这个名字。

谈及扫描器，首先提及一个常识，“单词结尾一般会有空白”。
实际上，大多数程序设计语言都是这样，因为这是最简单的方式。

例外总是存在。比如，在旧时的Fortran中，空格没有这层含义。这意味着单词并不以空格结尾，
你可以在变量名后面放上空格。然而，这让解析变得异常复杂，因此编译器提供商一个接一个的开始忽略这个标准。
最终，Fortran 90遵循了这个趋势，造成了“空格影响标准”的事实。

顺便说一下，Fortran中空格没有意义的原因好像是，在穿孔卡片上编程时，空白数量容易出错。

h3. 符号序列

我说过，扫描器分割出一系列的单词（记号），不过，准确的说，扫描器创建的是一系列”符号“，而非单词。

符号是什么？以数字为例。在程序设计语言中，1，2，3，99都是“数字”。从语法角度来说，它们完全可以用在相同的地方。
写1的地方，我们也可以写2或是3。因此，解析器无需区别对待它们。对于数字而言，”数字“足够了。

像“数字”、“标识符”等这样的东西归结起来称为“符号”。注意，不要将它与`Symbol`类混淆起来。

扫描器先将字符串分割为单词，确定它们是什么符号。
比如，`NUMBER`或`DIGIT`表示数字，`IDENTIFIER`表示类似“`name`”这样的名字,
`IF` 表示保留字`if`。这些符号会在下一个阶段用到。

h3. 解析器生成器

扫描器分割出的单词和符号列表用以构建一棵树。这棵树叫做语法树。

“解析器”这个名字有时会包含扫描器和创建语法树两个部分。然而，我们这里说的“解析器”是指比较窄的含义：创建语法树。
解析器如何根据一系列符号创建语法树呢？换句话说，为了找到一段代码对应的语法树，我们应该关注什么呢？

第一种方式是关注单词的含义。比如，假设我们找到了一个单词`var`。
如果之前曾经将`var`定义为局部变量，我们将这里理解为读取局部变量。

另一种方式是只关注我们所见。比如，如果标识符后面跟着一个‘`=`’，我们将其理解为赋值。
如果出现了保留字`if`，我们将其理解为一个`if`语句的开始。

最后的方法，也只关注我们所见，但注重的是当前趋势。换句话说，语言必须设计成通过查看一系列符号进行分析。
这样选择是因为这种方式比较简单，更容易泛化，能够以工具对其自动化。这样的工具称为解析器生成器。

UNIX下最常用的解析器生成器是`yacc`。类似于其它语言，`ruby`的解析器就是用`yacc`编写而成。
这个工具的输入文件是`parser.y`。因此，想要阅读`ruby`的解析器，我们需要在一定程度上理解`yacc`。（注意：从1.9开始，
`ruby`用`bison`取代了`yacc`。然而，`bison`基本上就是`yacc`增加了一些功能，因此，本章的价值并不会降低）

本章会简单介绍一下`yacc`，以便理解`parse.y`，因此，这里限定为理解`parse.y`所需的内容。
如果你想更多的了解解析器和解析器生成器，我推荐给你一本我写的书，《Rubyを256倍使うための本 無道編》。
推荐这本书，并不是因为它是我写的，而是在这个领域里，它是最容易理解的。此外它很便宜，因此，它并不能让我富有。

然而，如果你喜欢其它人的书（或是无法阅读日语），我推荐O'Reilly的《lex & yacc programming》，
作者是John R. Levine, Tony Mason和Doug Brown。如果你还不满足，
你也就该读Alfred V. Aho, Ravi Sethi和Jeffrey D. Ullman的《Compilers》（也称为“龙书”，以其封面的龙得名）。

h2. 语法

h3. 语法文件

`yacc`的输入文件称为“语法文件”，因为语法就写在其中。语法文件的命名约定是`*.y`。把它传给`yacc`，可以生成C的源代码，
之后就可以像通常那样进行编译（图1显示了整个过程）。

!images/ch_yacc_build.png(文件关系图)!

输出文件的名字总是`y.tab.c`，无法改变。新版本的`yacc`允许通过命令行进行改变，但是为了兼容性，保持`y.tab.c`更安全一些。
顺便说一下，`y.tab.c` 中的`tab`源自`table`（表），因为其中定义了大量的表。我们现在该来看看这个文件了。

语法文件的格式如下：

▼ 语法文件的通用格式
<pre class="longlist">
%{
文件头
%}
%union ....
%token ....
%type ....

%%
规则部分
%%
用户定义部分
</pre>

`yacc`的输入文件先以`%%`被分为3个部分。第一部分称为定义部分，包含大量的定义和设置。
我们可以用C把想要的任何东西写在`%{`和`%}`之间，比如必要的宏。随后，以`%`开头的指令是`yacc`专有的指令。
这里用到的指令会在后面的例子中一个个进行讲解。

文件的中间部分称为规则部分，这是`yacc`最核心的部分。这里记录着我们需要解析的语法。我们在下一节中详细的进行解释。

文件最后一部分是 用户定义部分，用户可以自由使用。`yacc`只是把这部分内容逐字拷贝到输出文件中。
比如，可以用来放置一些解析器需要的辅助例程。

h3. `yacc`所为

