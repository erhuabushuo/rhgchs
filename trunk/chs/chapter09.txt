$comment(-*- coding: utf-8 -*- vim: set encoding=utf-8:)$
Translated by Ye Zheng, Chaofan Jiang

h1. 第九章：`yacc`快速教程

h2. 概要

h3. 解析器和扫描器

一直以来，如何为程序设计语言编写解析器一直是一个活跃的研究领域，并形成了一些成型的策略。
只要不是特别诡异的语法，我们便可以用下面的方式进行处理。

首先，最下面有一个“将字符串分割成一系列的单词（或是记号（token））”的部分。
这个部分称为扫描器（scanner）或词法解析器（lexer）。
也有人用“词法分析器（lexical analyzer）”，但说起来太复杂，所以，我们选择了扫描器（scanner）这个名字。

谈及扫描器，首先提及一个常识，“单词结尾一般会有空白”。
实际上，大多数程序设计语言都是这样，因为这是最简单的方式。

例外总是存在。比如，在旧时的Fortran中，空格没有这层含义。这意味着单词并不以空格结尾，
你可以在变量名后面放上空格。然而，这让解析变得异常复杂，因此编译器提供商一个接一个的开始忽略这个标准。
最终，Fortran 90遵循了这个趋势，造成了“空格影响标准”的事实。

顺便说一下，Fortran中空格没有意义的原因好像是，在穿孔卡片上编程时，空白数量容易出错。

h3. 符号序列

我说过，扫描器分割出一系列的单词（记号），不过，准确的说，扫描器创建的是一系列”符号“，而非单词。

符号是什么？以数字为例。在程序设计语言中，1，2，3，99都是“数字”。从语法角度来说，它们完全可以用在相同的地方。
写1的地方，我们也可以写2或是3。因此，解析器无需区别对待它们。对于数字而言，”数字“足够了。

像“数字”、“标识符”等这样的东西归结起来称为“符号”。注意，不要将它与`Symbol`类混淆起来。

扫描器先将字符串分割为单词，确定它们是什么符号。
比如，`NUMBER`或`DIGIT`表示数字，`IDENTIFIER`表示类似“`name`”这样的名字,
`IF` 表示保留字`if`。这些符号会在下一个阶段用到。

h3. 解析器生成器


